/* Tiny MD parser (not full Markdown). For full features, replace with https://cdn.jsdelivr.net/npm/marked/marked.min.js */
const marked = {
  parse(md){
    const esc = s => s.replace(/[&<>]/g,m=>({'&':'&amp;','<':'&lt;','>':'&gt;'}[m]));
    // headings
    md = md.replace(/^### (.*)$/gm, '<h3>$1</h3>');
    md = md.replace(/^## (.*)$/gm, '<h2>$1</h2>');
    md = md.replace(/^# (.*)$/gm, '<h1>$1</h1>');
    // bold/italic
    md = md.replace(/\*\*(.+?)\*\*/g,'<strong>$1</strong>');
    md = md.replace(/\*(.+?)\*/g,'<em>$1</em>');
    // links
    md = md.replace(/\[([^\]]+)\]\(([^)]+)\)/g,'<a href="$2" target="_blank" rel="noopener">$1</a>');
    // lists
    md = md.replace(/(?:^|\n)(\s*)- (.*)(?=\n|$)/g,function(_,indent,item){return `\n${indent}<ul><li>${item}</li></ul>`});
    md = md.replace(/<\/ul>\n<ul>/g,''); // merge adjacent uls
    // paragraphs
    md = md.split(/\n{2,}/).map(block=>{
      if (block.trim().match(/^<h[1-6]|<ul|<blockquote|<pre|<ol/)) return block;
      return '<p>'+block.trim().replace(/\n/g,'<br>')+'</p>';
    }).join('\n');
    return md;
  }
};
